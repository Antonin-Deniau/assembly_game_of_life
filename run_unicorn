#!/usr/bin/env python

import curses, time
from unicorn import *
from unicorn.x86_const import *

s = curses.initscr()

width = 100
height = 50

def draw_dots(matrix):
  lines = [matrix[i:i + width] for i in range(0, len(matrix), width)]
  print lines[0]

  for w in range(0, width):
    for h in range(0, height):
      dot = chr(lines[h][w])
      s.addstr(h, w, dot)

def draw_screen(uc):
  offset = uc.reg_read(UC_X86_REG_RAX)
  matrix = uc.mem_read(offset, width * height)
  draw_dots(matrix)
  s.refresh()

ADDRESS = 0x0

def hook_intr(uc, intno, user_data):
  if intno == 0x1: # refresh
    draw_screen(uc)

  if intno == 0x2: # sleep
    rax = uc.reg_read(UC_X86_REG_RAX)
    time.sleep(rax)

  elif intno == 0x3: # debug
    rax = uc.reg_read(UC_X86_REG_RAX)
    print(rax)

  elif intno == 0xFF: #exit
    uc.emu_stop()

def run(mode, code):
  try:
    mu = Uc(UC_ARCH_X86, mode)
    mu.mem_map(ADDRESS, 2 * 1024 * 1024)
    mu.reg_write(UC_X86_REG_ESP, ADDRESS + 0x200000)
    mu.mem_write(ADDRESS, code)
    mu.hook_add(UC_HOOK_INTR, hook_intr)
    mu.emu_start(ADDRESS, ADDRESS + len(code))
  except UcError as e:
    print("ERROR: %s" % e)

with open("./os", "rb") as binary_file:
  data = binary_file.read()
  run(UC_MODE_64, data)
