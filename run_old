#!/usr/bin/env python

import curses, time

import sys, select, tty, termios # for keyboard

from threading import Thread
from unicorn import *
from unicorn.x86_const import *

s = curses.initscr()
log = open("./debugger.log", "w")

width = 100
height = 50
ADDRESS = 0x0

KEYBOARD_BUFFER = 0x41
KEYBOARD_THREAD = True

class Keyboard(Thread):
  def __init__(self):
    Thread.__init__(self)

  def run(self):
    KEYBOARD_BUFFER = "qsdf"

def debug(msg):
  log.write(msg + "\n")
  log.flush()

def draw_dots(matrix):
  lines = [matrix[i:i + width] for i in range(0, len(matrix), width)]

  for w in range(0, width):
    for h in range(0, height):
      dot = chr(lines[h][w])
      try:
        s.addstr(h, w, dot)
      except:
        s.addstr(h, w, "?")

def draw_screen(uc):
  offset = uc.reg_read(UC_X86_REG_RAX)
  matrix = uc.mem_read(offset, width * height)
  draw_dots(matrix)
  s.refresh()

def hook_intr(uc, intno, user_data):
  if intno == 0x1: # refresh
    draw_screen(uc)

  elif intno == 0x2: # sleep
    rax = uc.reg_read(UC_X86_REG_RAX)
    time.sleep(rax / 1000)

  elif intno == 0x3: # debug
    debug("\n\n*** breakpoint ***")
    rdi = uc.reg_read(UC_X86_REG_RDI)
    rsi = uc.reg_read(UC_X86_REG_RSI)
    rsp = uc.reg_read(UC_X86_REG_RSP)
    rbp = uc.reg_read(UC_X86_REG_RBP)
    rax = uc.reg_read(UC_X86_REG_RAX)
    debug("rdi: 0x{:0>10X} rsi: 0x{:0>10X}  rsp: 0x{:0>10X} rbp: 0x{:0>10X} rax: 0x{:0>10}".format(rdi, rsi, rsp, rbp, rax))
    r10 = uc.reg_read(UC_X86_REG_R10)
    r11 = uc.reg_read(UC_X86_REG_R11)
    r12 = uc.reg_read(UC_X86_REG_R12)
    r13 = uc.reg_read(UC_X86_REG_R13)
    r14 = uc.reg_read(UC_X86_REG_R14)
    debug("r10: 0x{:0>10X} r11: 0x{:0>10X}  r12: 0x{:0>10X} r13: 0x{:0>10X} r14: 0x{:0>10}".format(r10, r11, r12, r13, r14))

  elif intno == 0x4: # get_keyboard
    uc.reg_write(UC_X86_REG_EAX, KEYBOARD_BUFFER)

  elif intno == 0xFF: # exit
    debug("exit")
    uc.emu_stop()

def run(mode, code):
  try:
    mu = Uc(UC_ARCH_X86, mode)
    mu.mem_map(ADDRESS, 2 * 1024 * 1024)
    mu.reg_write(UC_X86_REG_RSP, ADDRESS + 0x200000)
    mu.reg_write(UC_X86_REG_RBP, ADDRESS + 0x200000)
    mu.mem_write(ADDRESS, code)
    mu.hook_add(UC_HOOK_INTR, hook_intr)
    mu.emu_start(ADDRESS, ADDRESS + len(code))
  except UcError as e:
    print("ERROR: %s" % e)

with open("./main", "rb") as binary_file:
  keyboard = Keyboard()
  keyboard.start()

  data = binary_file.read()
  debug("\n\n********************** BEGIN DEBUGGER SESSION *************************")
  run(UC_MODE_64, data)
  KEYBOARD_THREAD = False
  log.close()
